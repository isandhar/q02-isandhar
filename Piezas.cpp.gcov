        -:    0:Source:Piezas.cpp
        -:    0:Graph:Piezas.gcno
        -:    0:Data:Piezas.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "Piezas.h"
        -:    2:#include <vector>
        -:    3:#include <iostream>
        -:    4:using namespace std;
        -:    5:/** CLASS Piezas
        -:    6: * Class for representing a Piezas vertical board, which is roughly based
        -:    7: * on the game "Connect Four" where pieces are placed in a column and 
        -:    8: * fall to the bottom of the column, or on top of other pieces already in
        -:    9: * that column. For an illustration of the board, see:
        -:   10: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   11: *
        -:   12: * Board coordinates [row,col] should match with:
        -:   13: * [2,0][2,1][2,2][2,3]
        -:   14: * [1,0][1,1][1,2][1,3]
        -:   15: * [0,0][0,1][0,2][0,3]
        -:   16: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   17: * dropped in column 2 should take [1,2].
        -:   18:**/
        -:   19:
        -:   20:
        -:   21:/**
        -:   22: * Constructor sets an empty board (default 3 rows, 4 columns) and 
        -:   23: * specifies it is X's turn first
        -:   24:**/
function _ZN6PiezasC2Ev called 78 returned 100% blocks executed 81%
       78:   25:Piezas::Piezas(){
call    0 returned 100%
call    1 never executed
       78:   26:	board.resize(BOARD_ROWS);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 never executed
      312:   27:	for(unsigned int i = 0; i < board.size(); i++){
call    0 returned 100%
branch  1 taken 75%
branch  2 taken 25% (fallthrough)
      234:   28:	  board[i].resize(BOARD_COLS);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   29:	}
       78:   30:	reset();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       78:   31:	turn = X;
       78:   32:}
        -:   33:	
        -:   34:/**
        -:   35: * Resets each board location to the Blank Piece value, with a board of the
        -:   36: * same size as previously specified
        -:   37:**/
function _ZN6Piezas5resetEv called 82 returned 100% blocks executed 100%
       82:   38:void Piezas::reset(){
      328:   39:	for(int i = 0; i < BOARD_ROWS; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1230:   40:	  for(int j = 0; j < BOARD_COLS; j++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      984:   41:	    board[i][j] = Blank;
call    0 returned 100%
call    1 returned 100%
        -:   42:	  }
        -:   43:	}
       82:   44:}
        -:   45:
        -:   46:/**
        -:   47: * Places a piece of the current turn on the board, returns what
        -:   48: * piece is placed, and toggles which Piece's turn it is. dropPiece does 
        -:   49: * NOT allow to place a piece in a location where a column is full.
        -:   50: * In that case, placePiece returns Piece Blank value 
        -:   51: * Out of bounds coordinates return the Piece Invalid value
        -:   52: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   53:**/ 
function _ZN6Piezas9dropPieceEi called 210 returned 100% blocks executed 96%
      210:   54:Piece Piezas::dropPiece(int column){
      210:   55:	if(column > BOARD_COLS-1 || column < 0){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        8:   56:	  if(turn == X){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        4:   57:	    turn = O;
        -:   58:	  }
        -:   59:	  else{
        4:   60:	    turn = X;
        -:   61:	  }
        8:   62:	  return Invalid;
        -:   63:	}
      202:   64:	if(pieceAt(2, column) != Blank){
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        4:   65:	  if(turn == X){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   66:	    turn = O;
        -:   67:	  }
        -:   68:	  else{
        2:   69:	    turn = X;
        -:   70:	  }
        4:   71:	  return Blank;
        -:   72:	}
      198:   73:	Piece prevPiece = turn;
      360:   74:	for(int i = 0; i < BOARD_ROWS; i++){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
      360:   75:	  if(board[i][column] == Blank){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 55% (fallthrough)
branch  3 taken 45%
      198:   76:	    board[i][column] = turn;
call    0 returned 100%
call    1 returned 100%
      198:   77:	    if(turn == X){
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
      110:   78:	      turn = O;
        -:   79:	    }
        -:   80:	    else{
       88:   81:	      turn = X;
        -:   82:	    }
      198:   83:	    return prevPiece;
        -:   84:	  }
        -:   85:	}
    #####:   86:}
        -:   87:/**
        -:   88: * Returns what piece is at the provided coordinates, or Blank if there
        -:   89: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   90:**/
function _ZN6Piezas7pieceAtEii called 252 returned 100% blocks executed 100%
      252:   91:Piece Piezas::pieceAt(int row, int column){
      252:   92:	if(row < 0 || row > BOARD_ROWS-1 || column < 0 || column > BOARD_COLS-1){
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       30:   93:	  return Invalid;
        -:   94:	}
      222:   95:	return board[row][column];
call    0 returned 100%
call    1 returned 100%
        -:   96:}
        -:   97:/**
        -:   98: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   99: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  100: * For a game to be over, all locations on the board must be filled with X's 
        -:  101: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  102: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  103: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  104: * line, it is a tie.
        -:  105:**/
function _ZN6Piezas9gameStateEv called 12 returned 100% blocks executed 100%
       12:  106:Piece Piezas::gameState(){
       12:  107:	int sumX = 1;
       12:  108:	int sumO = 1;
       12:  109:	int maxX = 0;
       12:  110:	int maxO = 0;
       12:  111:	int sumCX = 1;
       12:  112:	int sumCO = 1;
       12:  113:	int maxCX = 0;
       12:  114:	int maxCO = 0;
       44:  115:	for(int i = 0; i < BOARD_ROWS; i++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      164:  116:	  for(int j = 0; j < BOARD_COLS; j++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      132:  117:	    if(board[i][j] == Blank){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        2:  118:	      return Invalid;
        -:  119:	    }
        -:  120:	  }
        -:  121:	}
       40:  122:	for(int i = 0; i < BOARD_ROWS; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      120:  123:	  for(int j = 0; j < BOARD_COLS-1; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       90:  124:	    if(board[i][j] == board[i][j+1]){
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 36% (fallthrough)
branch  5 taken 64%
       32:  125:	      if(board[i][j] == 'X'){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
       16:  126:		sumX++;
        -:  127:	      }
        -:  128:	      else{
       16:  129:		sumO++;
        -:  130:	      }
        -:  131:	    }
        -:  132:	  }
       30:  133:	  if(sumX > maxX){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       12:  134:	    maxX = sumX;
        -:  135:	  }
       30:  136:	  if(sumO > maxO){
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
       16:  137:	    maxO = sumO;
        -:  138:	  }
       30:  139:	  sumX = 1;
       30:  140:	  sumO = 1;
        -:  141:	}
       50:  142:	for(int i = 0; i < BOARD_COLS; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      120:  143:	  for(int j = 0; j < BOARD_ROWS-1; j++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       80:  144:	    if(board[j][i] == board[j+1][i]){
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 68%
       26:  145:	      if(board[j][i] == 'X'){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 38% (fallthrough)
branch  3 taken 62%
       10:  146:		sumCX++;
        -:  147:	      }
        -:  148:	      else{
       16:  149:		sumCO++;
        -:  150:	      }
        -:  151:	    }
        -:  152:	  }
       40:  153:	  if(sumCX > maxCX){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
       14:  154:	    maxCX = sumCX;
        -:  155:	  }
       40:  156:	  if(sumCO > maxCO){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
       14:  157:	    maxCO = sumCO;
        -:  158:	  }
       40:  159:	  sumCX = 1;
       40:  160:	  sumCO = 1;
        -:  161:	}
       10:  162:	if(maxCX > maxX){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        2:  163:	  maxX = maxCX;
        -:  164:	}
       10:  165:	if(maxCO > maxO){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        2:  166:	  maxO = maxCO;
        -:  167:	}
       10:  168:	if(maxX > maxO){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        4:  169:	  return X;
        -:  170:	}
        6:  171:	else if(maxO > maxX){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        4:  172:	  return O;
        -:  173:	}
        2:  174:	return Blank;
function _GLOBAL__sub_I__ZN6PiezasC2Ev called 2 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 2 returned 100% blocks executed 100%
        6:  175:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
